// üìå Importation des modules n√©cessaires
const mongoose = require('mongoose');
const Payment = require('../models/Payment');

const User = require('../models/User');
const Taxpayer = require('../models/Taxpayer');



const TaxpayerTax = require('../models/TaxpayerTax');
const Tax = require('../models/Tax');




const getTotalPaid = async (req, res) => {
    try {
      console.log('üîç D√©but de la r√©cup√©ration du montant total pay√©...');
      console.log('üìå ID du contribuable connect√© :', req.user.taxpayerId);
  
      // 1. Rechercher les paiements r√©guliers (source: 'regular')
      const regularPayments = await Payment.find({
        taxpayer: req.user.taxpayerId,
        source: 'regular', // Filtrer les paiements r√©guliers
      }).select('amountPaid'); // On ne s√©lectionne que le montant pay√©
  
      console.log('üìã Paiements r√©guliers trouv√©s :', regularPayments);
  
      // 2. Rechercher les paiements impay√©s (source: 'unpaid')
      const unpaidPayments = await Payment.find({
        taxpayer: req.user.taxpayerId,
        source: 'unpaid', // Filtrer les paiements impay√©s
      }).select('amountPaid'); // On ne s√©lectionne que le montant pay√©
  
      console.log('üìã Paiements impay√©s trouv√©s :', unpaidPayments);
  
      // 3. Calculer le montant total pay√© en additionnant les montants des paiements r√©guliers et impay√©s
      const totalPaidFromRegular = regularPayments.reduce((sum, payment) => sum + (payment.amountPaid || 0), 0);
      const totalPaidFromUnpaid = unpaidPayments.reduce((sum, payment) => sum + (payment.amountPaid || 0), 0);
  
      // 4. Total pay√©
      const totalPaid = totalPaidFromRegular + totalPaidFromUnpaid;
  
      console.log('üí∞ Montant total pay√© (r√©gulier + impay√©) :', totalPaid);
  
      res.status(200).json({
        totalPaid: totalPaid || 0
      });
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du montant total pay√© :', err.message);
      res.status(500).json({
        message: 'Erreur lors de la r√©cup√©ration du montant total pay√©.',
        error: err.message
      });
    }
  };
  




const getTotalMonthlyAndAnnualDue = async (req, res) => {
    try {
        console.log('üîç D√©but de la r√©cup√©ration des taxes mensuelles et annuelles...');
        console.log('üìå ID du contribuable connect√© :', req.user.taxpayerId);

        // Rechercher les taxes associ√©es au contribuable
        const taxpayerTaxes = await TaxpayerTax.find({ taxpayer: req.user.taxpayerId })
            .populate({
                path: 'tax',
                select: 'name frequency' // On r√©cup√®re le nom et la fr√©quence de la taxe
            });

        console.log('üìã Taxes associ√©es trouv√©es :', taxpayerTaxes);

        // Filtrer et calculer les montants
        const totalMonthlyDue = taxpayerTaxes
            .filter(taxpayerTax => taxpayerTax.tax.frequency === 'monthly')
            .reduce((sum, taxpayerTax) => sum + (taxpayerTax.totalAmount || 0), 0);

        const totalAnnualDue = taxpayerTaxes
            .filter(taxpayerTax => taxpayerTax.tax.frequency === 'annual')
            .reduce((sum, taxpayerTax) => sum + (taxpayerTax.totalAmount || 0), 0);

        console.log('üí∞ Montant total mensuel d√ª :', totalMonthlyDue);
        console.log('üí∞ Montant total annuel d√ª :', totalAnnualDue);

        res.status(200).json({
            totalMonthlyDue: totalMonthlyDue || 0,
            totalAnnualDue: totalAnnualDue || 0
        });
    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des montants totaux mensuels et annuels :', err.message);
        res.status(500).json({
            message: 'Erreur lors de la r√©cup√©ration des montants totaux mensuels et annuels.',
            error: err.message
        });
    }
};









const getTotalDue = async (req, res) => {
    console.log('üîç D√©but de la r√©cup√©ration du montant total d√ª...');
    try {
        // R√©cup√©ration de l'ID du contribuable depuis le token
        const taxpayerId = req.user.taxpayerId;
        console.log('üìå ID du contribuable connect√© :', taxpayerId);

        // V√©rification si l'utilisateur est bien un contribuable
        if (req.user.role !== 'contribuable') {
            console.error('‚ùå Acc√®s refus√© : r√¥le non autoris√©.');
            return res.status(403).json({ message: 'Acc√®s refus√©. R√¥le non autoris√©.' });
        }

        // ‚úÖ Nouvelle approche : R√©cup√©ration de TaxpayerTax avec les informations sur les taxes
        const taxes = await TaxpayerTax.find({ 
            taxpayer: taxpayerId, 
            status: { $in: ['pending', 'overdue'] } // üî• Prendre en compte pending et overdue
        })
        .populate('tax', 'name')
        .select('remainingAmount tax');

        console.log('üìã Taxes r√©cup√©r√©es :', taxes);

        // ‚úÖ Calcul du montant total d√ª
        const totalDue = taxes.reduce((acc, tax) => acc + (tax.remainingAmount || 0), 0);

        // ‚úÖ R√©ponse avec valeurs par d√©faut
        res.status(200).json({ 
            totalDue: totalDue || 0,  // Si undefined, retourne 0
            taxes: taxes || []        // Si undefined, retourne un tableau vide
        });

    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration du montant total d√ª :', err.message);
        res.status(500).json({ 
            message: 'Erreur lors de la r√©cup√©ration du montant total d√ª.', 
            error: err.message 
        });
    }
};



// üìå Contr√¥leur pour l'historique des paiements


const getPaymentHistory = async (req, res) => {
    console.log('===== D√©but du contr√¥leur getPaymentHistory =====');
    console.log('üì• Requ√™te re√ßue sur /payment-history');
    console.log('Utilisateur extrait du token :', req.user);
  
    try {
        // ID du contribuable connect√© depuis le token
        const taxpayerId = req.user.taxpayerId;
        console.log('üìå ID du contribuable connect√© :', taxpayerId);

        // Rechercher les paiements pour ce contribuable
        const payments = await Payment.find({ taxpayer: taxpayerId })
            .populate('tax', 'name amount') // Inclure les infos sur la taxe
            .populate('collector', 'name')  // Inclure les infos du collecteur
            .sort({ date: -1 }); // Trier par date d√©croissante

        console.log('‚úÖ Paiements trouv√©s :', payments);

        res.status(200).json({ payments });
    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des paiements :', err.message);
        res.status(500).json({ 
            message: 'Erreur lors de la r√©cup√©ration des paiements.', 
            error: err.message 
        });
    }
};





// ‚úÖ Contr√¥leur pour r√©cup√©rer les d√©tails par taxe
const getTaxDetails = async (req, res) => {
    try {
      const taxpayerId = req.user.taxpayerId;
  
      const taxDetails = await TaxpayerTax.find({
        taxpayer: taxpayerId,
        status: { $in: ['pending', 'overdue'] }
      })
      .sort({ dueDate: -1 }) // Trier par date d'√©ch√©ance d√©croissante
      .populate('tax', 'name')
      .lean();
  
      const detailsByTax = taxDetails.map((tax) => ({
        name: tax.tax.name,
        totalAmount: tax.totalAmount,
        totalPaid: tax.paidAmount,
        remainingAmount: tax.remainingAmount || tax.totalAmount, 
      }));
  
      res.json({ detailsByTax });
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails par taxe :', err.message);
      res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
  };
  


module.exports = { getPaymentHistory, getTotalDue,getTotalPaid, getTotalMonthlyAndAnnualDue, getTaxDetails };
