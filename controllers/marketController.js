const Market = require('../models/Market');
const Collector = require('../models/Collector');
const User = require('../models/User');
const MarketCollector = require('../models/MarketCollector');


// Create a new market


  
// exports.createMarket = async (req, res) => {
//     try {
//       console.log('‚û°Ô∏è D√©but de la cr√©ation du march√©...');
//       console.log('üì• Donn√©es re√ßues :', req.body);
  
//       const { name, location, collector } = req.body;
  
//       if (!name || !location || !collector) {
//         console.error('‚ùå Nom, localisation ou collecteur manquant');
//         return res.status(400).json({ message: 'Nom, localisation et collecteur sont requis.' });
//       }
  
//       // V√©rifier si le collecteur existe
//       const existingCollector = await User.findById(collector);
//       if (!existingCollector) {
//         console.error('‚ùå Collecteur introuvable pour l\'ID fourni :', collector);
//         return res.status(404).json({ message: 'Collecteur introuvable.' });
//       }
  
//       console.log('‚úÖ Collecteur v√©rifi√© :', existingCollector);
  
//       // Cr√©er le march√©
//       const market = new Market({
//         name,
//         location,
//         collector,
//       });
  
//       await market.save();
  
//       console.log('‚úÖ March√© cr√©√© avec succ√®s :', market);
  
//       // Remplir ou mettre √† jour MarketCollector
//       let marketCollector = await MarketCollector.findOne({ user: collector });
  
//       if (!marketCollector) {
//         // Si MarketCollector n'existe pas, en cr√©er un
//         marketCollector = new MarketCollector({
//           user: collector,
//           assignedMarkets: [market._id], // Associer le march√© cr√©√©
//         });
//       } else {
//         // Sinon, ajouter le march√© √† la liste des march√©s assign√©s
//         marketCollector.assignedMarkets.push(market._id);
//       }
  
//       await marketCollector.save();
//       console.log('‚úÖ MarketCollector mis √† jour :', marketCollector);
  
//       res.status(201).json({
//         message: 'March√© cr√©√© avec succ√®s et collecteur mis √† jour.',
//         market,
//       });
//     } catch (err) {
//       console.error('‚ùå Erreur lors de la cr√©ation du march√© :', err.message);
//       res.status(500).json({ message: 'Erreur interne du serveur.' });
//     }
//   };
  
exports.createMarket = async (req, res) => {
    try {
      console.log('‚û°Ô∏è D√©but de la cr√©ation du march√©...');
      console.log('üì• Donn√©es re√ßues :', req.body);
  
      const { name, location, collector } = req.body;
  
      if (!name || !location || !collector) {
        console.error('‚ùå Nom, localisation ou collecteur manquant');
        return res.status(400).json({ message: 'Nom, localisation et collecteur sont requis.' });
      }
  
      // V√©rifier si le collecteur existe dans la collection Collector
      const existingCollector = await Collector.findById(collector).populate('user');

      if (!existingCollector) {
        console.error('‚ùå Collecteur introuvable pour l\'ID de l\'utilisateur fourni :', collector);
        return res.status(404).json({ message: 'Collecteur introuvable.' });
      }
  
      console.log('‚úÖ Collecteur v√©rifi√© :', existingCollector);
  
      // Cr√©er le march√©
      const market = new Market({
        name,
        location,
        collector: existingCollector.user._id, // Associer l'ID du User
      });
  
      await market.save();
  
      console.log('‚úÖ March√© cr√©√© avec succ√®s :', market);
  
      // Remplir ou mettre √† jour MarketCollector
      let marketCollector = await MarketCollector.findOne({ user: collector });
  
      if (!marketCollector) {
        // Si MarketCollector n'existe pas, en cr√©er un
        marketCollector = new MarketCollector({
          user: collector,
          assignedMarkets: [market._id], // Associer le march√© cr√©√©
        });
      } else {
        // Sinon, ajouter le march√© √† la liste des march√©s assign√©s
        marketCollector.assignedMarkets.push(market._id);
      }
  
      await marketCollector.save();
      console.log('‚úÖ MarketCollector mis √† jour :', marketCollector);
  
      res.status(201).json({
        message: 'March√© cr√©√© avec succ√®s et collecteur mis √† jour.',
        market,
      });
    } catch (err) {
      console.error('‚ùå Erreur lors de la cr√©ation du march√© :', err.message);
      res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
  };
  

// Get all markets
exports.getMarkets = async (req, res) => {
    try {
      console.log('‚û°Ô∏è D√©but de la r√©cup√©ration des march√©s...');
  
      const markets = await Market.find()
        .populate('collector', 'name phone email role'); // Inclure les informations n√©cessaires depuis User
  
      console.log('‚úÖ March√©s r√©cup√©r√©s avec succ√®s :', JSON.stringify(markets, null, 2));
      res.status(200).json(markets);
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des march√©s :', err.message);
      res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
  };
  
  


// Get all collectors
exports.getCollectors = async (req, res) => {
    try {
      console.log('‚û°Ô∏è D√©but de la r√©cup√©ration des collecteurs...');
      const collectors = await User.find({ role: 'collector' }).select('name phone');
      console.log('‚úÖ Collecteurs r√©cup√©r√©s :', collectors);
      res.status(200).json(collectors);
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des collecteurs :', err.message);
      res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
  };
  
  
  
  
  
  



// exports.getCollectorsForMarket = async (req, res) => {
//     try {
//       // Rechercher tous les collecteurs et inclure les informations de l'utilisateur associ√©
//       const collectors = await Collector.find().populate('user', 'name phone');
  
//       if (!collectors || collectors.length === 0) {
//         return res.status(404).json({ message: 'Aucun collecteur trouv√©.' });
//       }
  
//       // Formater les donn√©es pour simplifier le frontend
//       const formattedCollectors = collectors.map((collector) => ({
//         id: collector._id,
//         name: collector.user.name,
//         phone: collector.user.phone,
//       }));
  
//       res.status(200).json(formattedCollectors);
//     } catch (err) {
//       console.error('Erreur lors de la r√©cup√©ration des collecteurs :', err.message);
//       res.status(500).json({ message: 'Erreur interne du serveur.' });
//     }
//   };
  
exports.getMarketsByCollector = async (req, res) => {
  try {
    // R√©cup√©rer l'ID du collecteur connect√© depuis le token
    const collectorId = req.user.id;

    console.log("üì• Requ√™te re√ßue pour les march√©s du collecteur :", collectorId);

    // Trouver les march√©s associ√©s √† ce collecteur
    const markets = await Market.find({ collector: collectorId });

    console.log("‚úÖ March√©s r√©cup√©r√©s pour le collecteur :", markets);

    // V√©rifier si des march√©s ont √©t√© trouv√©s
    if (markets.length === 0) {
      return res.status(404).json({ message: "Aucun march√© trouv√© pour ce collecteur." });
    }

    res.status(200).json(markets);
  } catch (err) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des march√©s :", err.message);
    res.status(500).json({ message: "Erreur interne du serveur." });
  }
};
