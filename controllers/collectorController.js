

const Collector = require('../models/Collector');
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const mongoose = require('mongoose');




// const addCollector = async (req, res) => {
//   let newUser; // Variable pour suivre l'utilisateur en cas d'erreur
//   console.log("‚û°Ô∏è D√©but de la cr√©ation d‚Äôun collecteur...");
  
//   try {
//     const { name, phone, email, password, idDocument, address, assignedZones } = req.body;
//     console.log("üì• Donn√©es re√ßues :", req.body);

//     // V√©rifier si le champ phone est bien d√©fini et non vide
//     if (!phone) {
//       console.log("‚ùå √âchec : Num√©ro de t√©l√©phone manquant.");
//       return res.status(400).json({ message: "Le num√©ro de t√©l√©phone est requis." });
//     }

//     // V√©rifier si un utilisateur avec ce phone existe d√©j√†
//     console.log("üîç V√©rification de l'existence du t√©l√©phone...");
//     const existingUser = await User.findOne({ phone });

//     if (existingUser) {
//       console.log(`‚ùå Conflit : Le t√©l√©phone ${phone} est d√©j√† utilis√©.`);
//       return res.status(400).json({ message: "Le num√©ro de t√©l√©phone est d√©j√† utilis√©." });
//     }
//     console.log("‚úÖ Aucun conflit de t√©l√©phone d√©tect√©.");

//     // Hash du mot de passe
//     console.log("üîë Hashage du mot de passe...");
//     const hashedPassword = await bcrypt.hash(password || "12345678", 10);

//     // Cr√©ation de l‚Äôutilisateur
//     console.log("‚û°Ô∏è Cr√©ation de l‚Äôutilisateur...");
//     newUser = new User({
//       name,
//       phone,
//       email,
//       password: hashedPassword,
//       role: "collector",
//     });

//     await newUser.save();
//     console.log("‚úÖ Utilisateur cr√©√© :", {
//       name: newUser.name,
//       phone: newUser.phone,
//       email: newUser.email,
//       _id: newUser._id,
//     });

//     // Cr√©ation du collecteur
//     console.log("‚û°Ô∏è Cr√©ation du collecteur...");
//     const newCollector = new Collector({
//       user: newUser._id,
//       idDocument,
//       address,
//       assignedZones,
//     });

//     await newCollector.save();
//     console.log("‚úÖ Collecteur ajout√© :", {
//       user: newCollector.user,
//       idDocument: newCollector.idDocument,
//       address: newCollector.address,
//       assignedZones: newCollector.assignedZones,
//     });

//     res.status(201).json({ message: "Collecteur ajout√© avec succ√®s.", collector: newCollector });

//   } catch (err) {
//     // Gestion des erreurs : suppression de l'utilisateur si n√©cessaire
//     if (newUser && newUser._id) {
//       console.log("‚ö†Ô∏è Une erreur est survenue apr√®s la cr√©ation de l'utilisateur. Suppression en cours...");
//       await User.findByIdAndDelete(newUser._id);
//       console.log("‚úÖ Utilisateur supprim√© pour √©viter des incoh√©rences.");
//     }

//     console.error("‚ùå Erreur lors de la cr√©ation du collecteur :", err.message);
//     res.status(500).json({ message: "Erreur interne du serveur." });
//   }
// };



const addCollector = async (req, res) => {
  let newUser; // Variable pour suivre l'utilisateur en cas d'erreur
  console.log("‚û°Ô∏è D√©but de la cr√©ation d‚Äôun collecteur...");
  
  try {
    const { name, phone, email, password, idDocument, address, assignedZones, hireDate } = req.body;
    console.log("üì• Donn√©es re√ßues :", req.body);

    // V√©rifier si le champ phone est bien d√©fini et non vide
    if (!phone) {
      console.log("‚ùå √âchec : Num√©ro de t√©l√©phone manquant.");
      return res.status(400).json({ message: "Le num√©ro de t√©l√©phone est requis." });
    }

    // V√©rifier si un utilisateur avec ce phone existe d√©j√†
    console.log("üîç V√©rification de l'existence du t√©l√©phone...");
    const existingUser = await User.findOne({ phone });

    if (existingUser) {
      console.log(`‚ùå Conflit : Le t√©l√©phone ${phone} est d√©j√† utilis√©.`);
      return res.status(400).json({ message: "Le num√©ro de t√©l√©phone est d√©j√† utilis√©." });
    }
    console.log("‚úÖ Aucun conflit de t√©l√©phone d√©tect√©.");

    // Hash du mot de passe
    console.log("üîë Hashage du mot de passe...");
    const hashedPassword = await bcrypt.hash(password || "12345678", 10);

    // Cr√©ation de l‚Äôutilisateur
    console.log("‚û°Ô∏è Cr√©ation de l‚Äôutilisateur...");
    newUser = new User({
      name,
      phone,
      email,
      password: hashedPassword,
      role: "collector",
    });

    await newUser.save();
    console.log("‚úÖ Utilisateur cr√©√© :", {
      name: newUser.name,
      phone: newUser.phone,
      email: newUser.email,
      _id: newUser._id,
    });

    // Cr√©ation du collecteur
    console.log("‚û°Ô∏è Cr√©ation du collecteur...");
    const newCollector = new Collector({
      user: newUser._id,
      idDocument,
      address,
      assignedZones,
      hireDate: hireDate ? new Date(hireDate) : null, // Assurer que la hireDate est bien ajout√©e
    });

    await newCollector.save();
    console.log("‚úÖ Collecteur ajout√© :", {
      user: newCollector.user,
      idDocument: newCollector.idDocument,
      address: newCollector.address,
      assignedZones: newCollector.assignedZones,
      hireDate: newCollector.hireDate, // Afficher hireDate pour v√©rification
    });

    res.status(201).json({ message: "Collecteur ajout√© avec succ√®s.", collector: newCollector });

  } catch (err) {
    // Gestion des erreurs : suppression de l'utilisateur si n√©cessaire
    if (newUser && newUser._id) {
      console.log("‚ö†Ô∏è Une erreur est survenue apr√®s la cr√©ation de l'utilisateur. Suppression en cours...");
      await User.findByIdAndDelete(newUser._id);
      console.log("‚úÖ Utilisateur supprim√© pour √©viter des incoh√©rences.");
    }

    console.error("‚ùå Erreur lors de la cr√©ation du collecteur :", err.message);
    res.status(500).json({ message: "Erreur interne du serveur." });
  }
};


const getCollectors = async (req, res) => {
  try {
    // R√©cup√©rer tous les collecteurs avec leurs informations utilisateur
    const collectors = await Collector.find()
      .populate('user', 'name phone email') // R√©cup√©rer les infos de l'utilisateur associ√©
      .populate('assignedZones', 'name description'); // R√©cup√©rer les infos des zones associ√©es

    res.status(200).json(collectors);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des collecteurs :', err.message);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};





const updateCollector = async (req, res) => {
  const { id } = req.params; // R√©cup√©rer l'ID du collecteur dans l'URL
  console.log('ID du collecteur √† mettre √† jour:', id); // Log de l'ID

  try {
    const updatedCollector = await Collector.findOneAndUpdate(
      { '_id': id }, // Utilisation de l'ID pour rechercher le collecteur
      req.body,
      { new: true }
    );

    if (!updatedCollector) {
      return res.status(404).json({ message: 'Collecteur non trouv√©.' }); // Ajouter un message d'erreur si non trouv√©
    }

    console.log('Collecteur mis √† jour:', updatedCollector); // Log du collecteur mis √† jour
    res.status(200).json(updatedCollector);
  } catch (err) {
    console.error('Erreur lors de la mise √† jour du collecteur:', err.message);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};





module.exports = {
  getCollectors,
  addCollector, // Assurez-vous que cette fonction est d√©j√† export√©e si elle existe
  updateCollector,
};


