const TaxAssessment = require('../models/TaxAssessment');
const Taxpayer = require('../models/Taxpayer');
const TaxpayerTax = require('../models/TaxpayerTax');
const Tax = require('../models/Tax');



// üîπ R√©cup√©rer les taxes d'un contribuable pour une ann√©e donn√©e
// üîπ R√©cup√©rer les taxes d'un contribuable pour une ann√©e donn√©e
const getTaxpayerTaxesByYear = async (req, res) => {
  try {
    const { taxpayerId } = req.params;
    const { year } = req.query; // üî• On r√©cup√®re l'ann√©e envoy√©e dans l'URL sous forme de query

    if (!taxpayerId || !year) {
      return res.status(400).json({ message: "Identifiant du contribuable ou ann√©e manquante." });
    }

    const startDate = new Date(`${year}-01-01`);
    const endDate = new Date(`${year}-12-31`);

    const taxes = await TaxpayerTax.find({
      taxpayer: taxpayerId,
      dueDate: { $gte: startDate, $lte: endDate }, // üî• Filtrer par ann√©e
    }).populate('tax'); // Pour afficher les informations de chaque taxe

    res.status(200).json(taxes);
  } catch (err) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des taxes par ann√©e :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};


// üîπ Cr√©er un avis d'imposition pour un contribuable

const createTaxAssessment = async (req, res) => {
  try {
    console.log("üìå [CONTROLLER] createTaxAssessment appel√©.");
    console.log("üì© Donn√©es re√ßues :", req.body);

    const { taxpayer, taxes, totalAmount, remainingAmount, dueDate, fiscalYear } = req.body;

    if (!taxpayer || !taxes || taxes.length === 0) {
      console.warn("‚ö†Ô∏è Donn√©es invalides. Manque de donn√©es n√©cessaires.");
      return res.status(400).json({ message: "Donn√©es invalides." });
    }

    console.log("‚úÖ V√©rification des donn√©es valid√©e.");

    // üîπ G√©n√©rer un `assessmentNumber` unique bas√© sur l‚Äôann√©e fiscale et un compteur
    const lastAssessment = await TaxAssessment.findOne().sort({ createdAt: -1 }); 
    const lastNumber = lastAssessment ? parseInt(lastAssessment.assessmentNumber.split('-')[1]) : 0;
    const newNumber = lastNumber + 1;
    const assessmentNumber = `AI-${newNumber.toString().padStart(6, '0')}-${fiscalYear}`; 

    console.log("üìå Num√©ro d'avis g√©n√©r√© :", assessmentNumber);

    const taxAssessment = new TaxAssessment({
      taxpayer,
      assessmentNumber, // ‚úÖ Assignation du num√©ro d'avis unique
      taxes,
      totalAmount,
      remainingAmount,
      dueDate,
      fiscalYear,
      status: "pending",
    });

    console.log("üìå Enregistrement de l'avis d'imposition...");
    await taxAssessment.save();

    console.log("‚úÖ Avis d'imposition cr√©√© avec succ√®s :", taxAssessment);

    res.status(201).json({ message: "Avis d'imposition cr√©√© avec succ√®s", taxAssessment });

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'avis d'imposition :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};





// üîπ R√©cup√©rer l'avis d'imposition d'un contribuable
const getTaxAssessmentByTaxpayer = async (req, res) => {
  try {
    const { taxpayerId } = req.params;

    const taxAssessment = await TaxAssessment.findOne({ taxpayer: taxpayerId , status: 'pending' })
      .populate('taxpayer', 'user')
      .populate('taxes.tax', 'name amount frequency');

    if (!taxAssessment) {
      return res.status(404).json({ message: 'Aucun avis d‚Äôimposition trouv√© pour ce contribuable.' });
    }

    res.status(200).json(taxAssessment);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l‚Äôavis d‚Äôimposition:', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};

// üîπ Mettre √† jour un avis d'imposition
const updateTaxAssessment = async (req, res) => {
  try {
    const { assessmentId } = req.params;
    const { taxes } = req.body;

    if (!Array.isArray(taxes) || taxes.length === 0) {
      return res.status(400).json({ message: 'Aucune taxe fournie pour la mise √† jour.' });
    }

    const taxAssessment = await TaxAssessment.findById(assessmentId);
    if (!taxAssessment) {
      return res.status(404).json({ message: 'Avis d‚Äôimposition introuvable.' });
    }

    // Mise √† jour des taxes et recalcul du montant total
    let totalAmount = 0;
    const taxEntries = [];

    for (const taxId of taxes) {
      const tax = await Tax.findById(taxId);
      if (!tax) {
        return res.status(404).json({ message: `Taxe introuvable: ${taxId}` });
      }

      const amount = tax.frequency === 'monthly' ? tax.amount * 12 : tax.amount;
      totalAmount += amount;

      taxEntries.push({ tax: taxId, amount });
    }

    taxAssessment.taxes = taxEntries;
    taxAssessment.totalAmount = totalAmount;
    taxAssessment.remainingAmount = totalAmount - taxAssessment.paidAmount;

    await taxAssessment.save();

    res.status(200).json({ message: 'Avis d‚Äôimposition mis √† jour avec succ√®s.', taxAssessment });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l‚Äôavis d‚Äôimposition:', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};

// üîπ Supprimer un avis d'imposition
const deleteTaxAssessment = async (req, res) => {
  try {
    const { assessmentId } = req.params;

    const taxAssessment = await TaxAssessment.findByIdAndDelete(assessmentId);
    if (!taxAssessment) {
      return res.status(404).json({ message: 'Avis d‚Äôimposition introuvable.' });
    }

    res.status(200).json({ message: 'Avis d‚Äôimposition supprim√© avec succ√®s.' });
  } catch (error) {
    console.error('Erreur lors de la suppression de l‚Äôavis d‚Äôimposition:', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};



const getAllTaxAssessments = async (req, res) => {
  try {
    const taxAssessments = await TaxAssessment.find()
      .populate({
        path: 'taxpayer',
        populate: { path: 'user', select: 'name phone address activity code arrondissement' } // ‚úÖ R√©cup√®re les infos du contribuable
      })
      .populate({
        path: 'taxes.tax',
        select: 'name amount frequency'
      });
      
    res.status(200).json(taxAssessments);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des avis d‚Äôimposition:', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};


module.exports = {
  createTaxAssessment,
  getTaxAssessmentByTaxpayer,
  updateTaxAssessment,
  deleteTaxAssessment,
  getAllTaxAssessments,
  getTaxpayerTaxesByYear,
};
