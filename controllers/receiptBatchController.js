const ReceiptBatch = require('../models/ReceiptBatch');
const Market = require('../models/Market');
const MarketCollector = require('../models/MarketCollector');


exports.createReceiptBatch = async (req, res) => {
  try {
    console.log('üì• Donn√©es re√ßues pour la cr√©ation du lot :', req.body);

    const { market, startReceipt, endReceipt } = req.body;

    // Validation des champs requis
    if (!market || !startReceipt || !endReceipt) {
      console.error('‚ùå Champs requis manquants.');
      return res.status(400).json({ message: 'Tous les champs sont requis : march√©, re√ßus d√©but et fin.' });
    }

    // V√©rification du march√©
    const existingMarket = await Market.findById(market).populate('collector', 'name phone');
    if (!existingMarket) {
      console.error(`‚ùå Le march√© avec l'ID ${market} est introuvable.`);
      return res.status(404).json({ message: 'March√© introuvable.' });
    }

    if (!existingMarket.collector) {
      console.error(`‚ùå Aucun collecteur n'est assign√© au march√© ${market}.`);
      return res.status(400).json({ message: "Aucun collecteur n'est assign√© √† ce march√©." });
    }

    console.log('‚úÖ March√© trouv√© avec collecteur :', existingMarket.collector);

    // Validation de la plage de re√ßus
    const start = parseInt(startReceipt.replace('R', ''), 10);
    const end = parseInt(endReceipt.replace('R', ''), 10);

    if (isNaN(start) || isNaN(end) || start > end) {
      console.error('‚ùå Num√©ros de re√ßus invalides ou hors plage.');
      return res.status(400).json({ message: 'Les num√©ros de re√ßus sont invalides ou la plage est incorrecte.' });
    }

    // G√©n√©ration des codes de confirmation
    // const confirmationCodes = [];
    // for (let i = start; i <= end; i++) {
    //   confirmationCodes.push({
    //     receipt: `R${String(i).padStart(5, '0')}`,
    //     code: Math.floor(100 + Math.random() * 900).toString(), // Code al√©atoire √† 3 chiffres
    //   });
    // }


    const confirmationCodes = [];
    for (let i = start; i <= end; i++) {
  confirmationCodes.push({
    receipt: `R${String(i).padStart(5, '0')}`,
    code: Math.floor(100 + Math.random() * 900).toString(),
    status: "Generated", // üî• Assurez-vous que le statut par d√©faut est bien "Generated"
  });
}

    console.log('‚úÖ Codes de confirmation g√©n√©r√©s :', confirmationCodes);

    // Cr√©ation du lot de re√ßus
    const receiptBatch = new ReceiptBatch({
      market,
      collector: existingMarket.collector._id,
      startReceipt,
      endReceipt,
      confirmationCodes,
      status: 'Generated', // Respect du mod√®le
    });

    await receiptBatch.save();

    console.log('‚úÖ Lot de re√ßus cr√©√© avec succ√®s :', receiptBatch);
    res.status(201).json({
      message: 'Lot de re√ßus cr√©√© avec succ√®s.',
      receiptBatch,
    });
  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation du lot de re√ßus :', err);
    res.status(500).json({ 
      message: 'Erreur interne du serveur.',
      error: err.message,
    });
  }
};

  

  exports.getReceiptBatchSummary = async (req, res) => {
    try {
        console.log('‚û°Ô∏è D√©but de la r√©cup√©ration des lots de re√ßus...');
    
        // R√©cup√©rer les lots de re√ßus avec les informations des march√©s et des collecteurs
        const receiptBatches = await ReceiptBatch.find()
        .populate('market', 'name location') // Inclure nom et localisation du march√©
        .populate('collector', 'name'); // Inclure le nom du collecteur
        console.log('üì• Lots de re√ßus r√©cup√©r√©s depuis la base de donn√©es :', receiptBatches);
    
        res.status(200).json(receiptBatches);
      } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des re√ßus :', error.message);
        console.error('üõë Stack de l\'erreur :', error.stack); // Log de la pile d'erreurs pour plus de d√©tails
        res.status(500).json({ message: 'Erreur interne du serveur.' });
      }
  };
  
  
  
  

// R√©cup√©rer tous les lots de re√ßus
exports.getAllReceiptBatches = async (req, res) => {
  try {
    const receiptBatches = await ReceiptBatch.find()
      .populate('market', 'name location')
      .populate('collector', 'name phone');
    res.status(200).json(receiptBatches);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des lots de re√ßus :', err.message);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};








exports.getReceiptBatchById = async (req, res) => {
  const { id } = req.params;
  console.log("üì• Requ√™te re√ßue pour r√©cup√©rer le batch avec ID :", id);

  try {
    const batch = await ReceiptBatch.findById(id)
      .populate('market', 'name location') // Inclut nom et localisation du march√©
      .populate('collector', 'name'); // Inclut le collecteur

    if (!batch) {
      console.log("‚ùå Aucun batch trouv√© pour cet ID :", id);
      return res.status(404).json({ message: "Lot non trouv√©" });
    }

    console.log("‚úÖ Lot trouv√© :", JSON.stringify(batch, null, 2));
    return res.json(batch); // Retourne les donn√©es directement
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du batch :", error.message);
    return res.status(500).json({ message: "Erreur interne du serveur" });
  }
};


exports.getTotalGeneratedReceipts = async (req, res) => {
  console.log("üì• D√©but de la r√©cup√©ration du nombre de re√ßus g√©n√©r√©s...");

  try {
    // Filtrer les re√ßus avec le statut "Generated"
    const totalGeneratedReceipts = await ReceiptBatch.countDocuments({ status: "Generated" });

    console.log("üìä Nombre total de re√ßus g√©n√©r√©s trouv√©s :", totalGeneratedReceipts);

    res.status(200).json({ totalGeneratedReceipts });
  } catch (err) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des re√ßus g√©n√©r√©s :", err.message);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des re√ßus g√©n√©r√©s." });
  }
};


exports.activateReceiptBatch = async (req, res) => {
  try {
    console.log("üì• Requ√™te re√ßue pour activer le lot de re√ßus avec ID :", req.params.id);

    const { id } = req.params;

    // Rechercher le lot de re√ßus par ID
    const receiptBatch = await ReceiptBatch.findById(id);

    if (!receiptBatch) {
      console.error("‚ùå Lot de re√ßus introuvable pour l'ID :", id);
      return res.status(404).json({ message: 'Lot de re√ßus introuvable.' });
    }

    if (receiptBatch.status === 'Activated') {
      console.warn("‚ö†Ô∏è Ce lot de re√ßus est d√©j√† activ√© :", id);
      return res.status(400).json({ message: 'Ce lot de re√ßus est d√©j√† activ√©.' });
    }

    console.log("üîç Lot de re√ßus trouv√© :", receiptBatch);

    // Mise √† jour du statut des re√ßus individuels
    receiptBatch.confirmationCodes.forEach((receipt) => {
      receipt.status = 'Activated';
    });

    // Mise √† jour du statut du lot
    receiptBatch.status = 'Activated';
    receiptBatch.activatedAt = new Date(); // Date d'activation
    receiptBatch.activatedBy = req.user.id; // ID de l'utilisateur connect√©

    await receiptBatch.save();

    console.log("‚úÖ Lot de re√ßus activ√© avec succ√®s :", receiptBatch);

    res.status(200).json({ message: 'Lot de re√ßus activ√© avec succ√®s.', receiptBatch });
  } catch (err) {
    console.error("‚ùå Erreur lors de l‚Äôactivation du lot de re√ßus :", err.message);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};




exports.getActivatedReceiptsByMarket = async (req, res) => {
  try {
    const { marketId } = req.params;

    // Log: ID du march√© re√ßu
    console.log("üì• Requ√™te pour les re√ßus activ√©s du march√© ID :", marketId);

    // V√©rification de la validit√© de l'ID du march√©
    if (!marketId) {
      console.error("‚ùå ID du march√© manquant dans la requ√™te.");
      return res.status(400).json({ message: 'ID du march√© requis.' });
    }

    // Requ√™te pour trouver les re√ßus activ√©s pour le march√© donn√©
    const receipts = await ReceiptBatch.find({
      market: marketId,
      status: 'Activated',
    })
      .select('market collector startReceipt endReceipt confirmationCodes status activatedAt') // S√©lectionner uniquement les champs n√©cessaires
      .populate('market', 'name location') // Inclure les d√©tails du march√©
      .populate('collector', 'name phone'); // Inclure les d√©tails du collecteur

    // Log: R√©sultat de la requ√™te
    console.log("üîç R√©sultat des re√ßus activ√©s :", receipts);

    // V√©rification si aucun re√ßu n'est trouv√©
    if (!receipts.length) {
      console.warn("‚ö†Ô∏è Aucun re√ßu activ√© trouv√© pour ce march√© :", marketId);
      return res.status(404).json({ message: 'Aucun re√ßu activ√© trouv√© pour ce march√©.' });
    }

    // Filtrer pour retourner uniquement les re√ßus non utilis√©s
    const filteredReceipts = receipts.map((batch) => {
      const unusedReceipts = batch.confirmationCodes.filter(
        (code) => code.status === 'Activated'
      );

      return {
        _id: batch._id,
        market: batch.market,
        collector: batch.collector,
        startReceipt: batch.startReceipt,
        endReceipt: batch.endReceipt,
        status: batch.status,
        activatedAt: batch.activatedAt,
        confirmationCodes: unusedReceipts, // Inclure uniquement les re√ßus non utilis√©s
      };
    });

    // V√©rifier si apr√®s le filtrage il reste des re√ßus activ√©s
    const hasReceipts = filteredReceipts.some(
      (batch) => batch.confirmationCodes.length > 0
    );

    if (!hasReceipts) {
      console.warn("‚ö†Ô∏è Aucun re√ßu activ√© disponible pour ce march√© apr√®s filtrage.");
      return res.status(404).json({ message: 'Aucun re√ßu activ√© disponible pour ce march√©.' });
    }

    // Log: R√©ponse avant envoi
    console.log("‚úÖ Re√ßus activ√©s disponibles :", filteredReceipts);
    res.status(200).json({ receipts: filteredReceipts });
  } catch (error) {
    // Log: Erreur du serveur
    console.error("‚ùå Erreur lors de la r√©cup√©ration des re√ßus activ√©s :", error.message);
    res.status(500).json({ message: 'Erreur interne du serveur.', error: error.message });
  }
};














exports.deleteReceiptBatch = async (req, res) => {
  try {
    const { id } = req.params;

    const receiptBatch = await ReceiptBatch.findById(id);

    if (!receiptBatch) {
      return res.status(404).json({ message: 'Lot de re√ßus introuvable.' });
    }

    await receiptBatch.deleteOne();

    res.status(200).json({ message: 'Lot de re√ßus supprim√© avec succ√®s.' });
  } catch (err) {
    console.error('Erreur lors de la suppression du lot de re√ßus :', err.message);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
};




exports.exportBatch = async (req, res) => {
    try {
        console.log('‚û°Ô∏è D√©but de l‚Äôexportation d‚Äôun lot de re√ßus...');
        const { batchId } = req.params;

        const receiptBatch = await ReceiptBatch.findById(batchId)
            .populate('market', 'name location')
            .populate('collector', 'user')
            .populate({ path: 'collector', populate: { path: 'user', select: 'name phone' } });

        if (!receiptBatch) {
            console.error(`‚ùå Erreur : Lot de re√ßus avec l'ID ${batchId} introuvable.`);
            return res.status(404).json({ message: 'Lot de re√ßus introuvable.' });
        }

        // Renvoyer les donn√©es n√©cessaires pour le PDF et le fichier texte
        const exportData = {
            marketName: receiptBatch.market.name,
            marketLocation: receiptBatch.market.location,
            collectorName: receiptBatch.collector.user.name,
            collectorPhone: receiptBatch.collector.user.phone,
            receipts: receiptBatch.confirmationCodes,
        };

        console.log('‚úÖ Donn√©es d‚Äôexportation pr√™tes :', exportData);

        res.status(200).json(exportData);
    } catch (err) {
        console.error('‚ùå Erreur lors de l‚Äôexportation d‚Äôun lot de re√ßus :', err.message);
        res.status(500).json({ message: 'Erreur interne du serveur.' });
    }
};



exports.getActiveReceiptsForCollector = async (req, res) => {
  try {
    const collectorId = req.user.id; // R√©cup√©rer l'ID du collecteur connect√©

    // Rechercher les lots de re√ßus activ√©s attribu√©s √† ce collecteur
    const activeReceipts = await ReceiptBatch.find({
      collector: collectorId,
      status: 'Activated',
    }).populate('market', 'name location'); // Inclure les informations du march√©

    if (!activeReceipts.length) {
      return res.status(404).json({ message: "Aucun re√ßu activ√© trouv√© pour ce collecteur." });
    }

    res.status(200).json({ activeReceipts });
  } catch (err) {
    console.error("Erreur lors de la r√©cup√©ration des re√ßus activ√©s :", err.message);
    res.status(500).json({ message: "Erreur interne du serveur." });
  }
};
